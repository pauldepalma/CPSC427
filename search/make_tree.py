#serializes and stores a tree represented as a dictionary

import pickle

def make_tree(fout,fout1):

    #Key is parent node, tuple stores level and list of children
    '''
    #tree 0: website trace. 
    tree = {'r' : (0,['B','C']),
            'B' : (1,['D','E']),
            'C' : (1,['F','G']),
            'D' : (2,['H','I','J']),
            'E' : (2,['K','L']),
            'F' : (2,[0]),
            'G' : (2,['M','N']),
            'H' : (3,[1]),
            'I' : (3,[5]),
            'J' : (3,[8]),
            'K' : (3,[9]),
            'L' : (3,[3]),
            'M' : (3,[1]),
            'N' : (3,[100])}
    start = "MAX"
    '''
            
    '''    
    #tree 1: Power Point. 
    tree = {'r' : (0,['J','K']),
            'J' : (1,['M','Z']),
            'K' : (1,['N','T']),
            'M': (2,[8]),
            'Z' : (2,[12]),
            'N' : (2,[4]),
            'T' : (2,['P','Q','R']),
            'P' : (3,[7]),
            'Q' : (3,[3]),
            'R' : (3,[9])}
    start = "MAX"
    '''
    
    '''
    #tree 2: Power Point. 
    tree = {'r' : (0,['N','T']),
            'N' : (1,['D','E']),
            'T' : (1,['P','Q','R']),
            'D' : (2,[4]),
            'E' : (2,[3]),
            'P' : (2,[7]),
            'Q' : (2,[3]),
            'R' : (2,[9])}
    start = "MIN"
    '''

    '''
    #tree 3: notes, max first
    tree = {'r' :   (0,['B','C']),
            'B' :   (1,['D', 'E']),
            'C' :   (1,['F','G']),
            'D' :   (2,[8]),
            'E' :   (2,[12]),
            'F' :   (2,[4]),
            'G' :   (2,['H','I']),
            'H' :   (3,[7]),
            'I' :   (3,[9])}

    start = 'MAX'
    '''
    
    '''
    #tree 4: notes, max first
    tree = {'r' :   (0,['J','K']),
            'J' :   (1,['M','Z']),
            'K' :   (1,['N','X']),
            'M' :   (2,[8]),
            'Z' :   (2,[12]),
            'N' :   (2,[12]),
            'X' :   (2,['P','Q','R']),
            'P' :   (3,[17]),
            'Q' :   (3,['S','T','U']),
            'R' :   (3,['U']),
            'S' :   (4,[27]),
            'U' :   (4,[15])}

    start = 'MAX'
    '''
    
    
    '''
    #tree 6: notes
    tree = {'r' :   (0,['A','D', 'E']),
            'A' :   (1,['P','B']),
            'D' :   (1,['R','M']),
            'E' :   (1,['T','V']),
            'P' :   (2,['N','H']),
            'B' :   (2,['K','Q']),
            'R' :   (2,['O']),
            'M' :   (2,[12]),
            'T' :   (2,['W','X']),
            'V' :   (2, ['Y','Z']),
            'N' :   (3,[2]),
            'H' :   (3,[3]),
            'K' :   (3,[5]),
            'Q' :   (3,[100]),
            'O' :   (3,[0]),
            'W' :   (3,[2]),
            'X' :   (3,[1]),
            'Y' :   (3,[9]),
            'Z' :   (3,[11])}
    
    start = 'MAX'
    '''
    
    #tree 7: notes, max first
    tree = {'r' :   (0,['B','F']),
            'B' :   (1,['C','D']),
            'F' :   (1,['G','J']),
            'C' :   (2,['O','T','K']),
            'D' :   (2,['L','E']),
            'G' :   (2,['H','Q']),
            'J' :   (2,['U','Z']),
            'O' :   (3,[1]),
            'T' :   (3,[2]),
            'K' :   (3,[3]),
            'L' :   (3,[0]),
            'E' :   (3,['M','N']),
            'H' :   (3,['I']),
            'Q' :   (3,['X','Y']),
            'U' :   (3,[9]),
            'Z' :   (3,'R','S'),
            'M' :   (4,[1]),
            'N' :   (4,[14]),
            'I' :   (4,['P','W']),
            'X' :   (4,[2]),
            'Y' :   (4,[1]),
            'R' :   (4,[10]),
            'S' :   (4,[25]),
            'P' :   (5,[10]),
            'W' :   (5,[11])}

    start = 'MIN'
    '''
    #tree 8: notes
    tree = {'r'     :   (0,['B','C','D']),
            'B'     :   (1,['B1','B2', 'P']),
            'C'     :   (1,['C1','C2','C3']),
            'D'     :   (1,['E','H']),
            'B1'    :   (2,[3]),
            'B2'    :   (2,[12]),
            'P'     :   (2,['P1','P2']),
            'C1'    :   (2,[2]),
            'C2'    :   (2,[9]),
            'C3'    :   (2,[1]),
            'E'     :   (2,['F','G']),
            'H'     :   (2,['H1','H2']),
            'P1'    :   (3,[7]),
            'P2'    :   (3,[5]),
            'F'     :   (3,['F1','F2']),
            'G'     :   (3,['G1','G2']),
            'H1'    :   (3,[7]),
            'H2'    :   (3,[0]),
            'F1'    :   (4,[2]),
            'F2'    :   (4,[9]),
            'G1'    :   (4,[1]),
            'G2'    :   (4,[12])}

    start = 'MAX'
    '''
    
    pickle.dump(tree,open(fout, "wb")) 
    max_or_min = open(fout1,"w")
    max_or_min.write(start)
    max_or_min.close()
                

def main():
    fout = "tree.p"     #stores tree
    fout1 = "start.p"   #stores MAX or MIN, indicating root
    make_tree(fout,fout1)    
    
             
main()
