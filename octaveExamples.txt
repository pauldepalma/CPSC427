1. 	3 X 2 Arrary. ; at end prevents printing
	A = [1 2;3 4;5 6]

2.	Row Vector
	V = [1 2 3]
	Column Vector
	V = [1;2;3]

3.	2 X 3 Array of ones
	A = ones(2,3)
	2 X 3 Array of fives
        A = 5 * ones(2,3)

4.	Matrix Multiplication
	A = [1 2;3 4; 5 6]
	size(A) --> 3  2
        C = [1 1; 2 2]
        size(C) --> 2 2 

        M = A * C
        giving 3 X 2: [5 5; 11 11; 17 17]

5.	Dot product
	B = [1 2;3 4;5 6]

6.	Power operator
	B .^2 squares each element in B

7.	E to the x 
	exp(B) computes e^b for each element, b, of B 		

8. 	ln(X)
        log(X) computes ln(x) for each element, x, of X
        so, log(exp(A)) --> A

9.	1./V 
        element wise reciprocal of each element, x, of V

10.	W = rand(1,3) 
	gens random number, x, for each element, 0 < x < 1

11.	P = randn(1,3)
	like rand, but gaussian is chosen from the normal distribution  

12.	X = eye(4)
 	4 X 4 Identity matrix	

13.	A = magic(9)
	9 X 9 matrix, all rows, cols, diags sum to same number

14.	sum(A,1)
	sums cols

15.	sum(A,2)
	sums rows

16.	-A
	element-wise negation of A

17.	abs(A)
	element-wise absolute value of A

18.	V = [1;2;3]
	Q = V + ones(3,1)
	Adds 1 to each element in column vector, V

19.	A = magic(4)
	B = A'
	Transpose A: rows of A become cols of B

20.	A = [1 2 3]
        v = max(A) 
        max element of the vector

21.	A = magic(4)
        v = max(A)
        returns a col vector, each element of which is the max of each col of
        A

22.	A = magic(4)
	max(A,[],1) as in 21

23.	A = magic(4)
	max(A,[],2)
        returns row vector, each element of which is the max of each row
        of A

24.	A = magic(4)
	max(max(A)) 
	maximum value of A	 

25.	A = magic(3)
        [r,c] = find(A >=7)
	row and col numbers of all elts >= 7
        A(3,2) --> ans = 9 		 

26.	A = magic(10)
        B = eye(10)
        C = A .* B --> produces all zeros except for diagonals
        sum(sum(C,1)) --> sums diagonals
        Produces the same value as each col of sum(A,[],1)

27.	A = magic(3)
	P = pinv(A) --> produces the pseudo-inverse of A
        A * P --> identity matrix subject to roundoff error

28.	X = [0.0:0.01:0.99]
	Y = sin(8*pi*X)
	plot(X,Y)

29.	X as before
	Y1 = cos(8*pi*X)
	hold on
        plot(X,Y)
	plot(X,Y1,'r')
        plots a red cosine curve over a blue sine curve

30.	A = magic(5)
	B = A(:,2) --> B holds the second column of A		
        size(B) --> tells us that B is column vector 5 X 1

31.	C = A(2,:) --> C holds the second row of B

32	Loading a csv file into octave
	XY = csvread("data.csv") where data.csv is a csv file
        where data.csv was taken from 
        github.com/mattnedrich/GradientDescentExample

	size(XY) --> tells us that XY is a 100 X 2 matrix

33.	Transform XY into column vectors 
        X = XY(:,1) --> All rows from the first colum
	Y = XY(:,2) --> All rows from the second column

34.	Do a scatter plot of X and Y with 10 point red square filled markers
	scatter(X,Y,10,'r','s',"filled")

35.	Inserting a final column a zeroes 
	V = magic(5)
	sz = size(V,1) --> rows in V 
        z = zeros(sz,1) --> colum vector of zeros with sz rows 
	V = [V,z]

36.	35 done in a single line
	V = [V,zeros(size(V,1),1]

37.     Insert an initial column of ones
	V = [ones(size(V,1),1),V]

38.     A for loop
        V = zeros(15,1) --> a column vector of 15 zeros
        for i = 1:size(V,1)
          V(i) = 2^i
        end;

39.	A while loop
	V = zeros(10,1)
        i = 1;
        while i <= size(V,1)
          V(i) = 2^i;
          i = i + 1;
        end;

40.	Conditional
        if V(1) == 1
           disp("one");
        else
           disp("not one")
        end;

41.     Functions
        Create a file my_exp.m containing
        function [value] = my_exp(base,exp)
          value = base^exp;

        to execute, go to correct directory where the function is saved (pwd
        and cd work from within octave)
        [v] = my_exp(2,3);

  
        


	
